# -*- coding: utf-8 -*-
"""Clustering Credit Card

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dK7G1spg7leawTLkxFkWm7WP_74CPrx7
"""

from sklearn.preprocessing import StandardScaler
from sklearn.cluster import DBSCAN
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Carga los datos del conjunto de datos
data = pd.read_csv("CC GENERAL.csv")

# Elimina la columna "CUST_ID" ya que no aporta información relevante para el agrupamiento
data = data.drop('CUST_ID', axis=1)

# Rellena los valores faltantes en los datos con la media de cada columna
data = data.fillna(data.mean())

# Escala los datos utilizando StandardScaler
scaler = StandardScaler()
data_scaled = scaler.fit_transform(data)

# Define los parámetros para el algoritmo DBSCAN
epsilon = 0.5  # Radio de vecindad
min_samples = 5  # Número mínimo de muestras en una vecindad para considerar un núcleo

# Aplica el algoritmo DBSCAN
dbscan = DBSCAN(eps=epsilon, min_samples=min_samples)
dbscan.fit(data_scaled)

# Agrega las etiquetas de cluster al conjunto de datos original
data['Cluster_DBSCAN'] = dbscan.labels_

# Genera el conjunto de datos agrupado por cluster con características específicas
grouped_data = data.groupby('Cluster_DBSCAN').mean().round(2)

# Define las características específicas para cada cluster
characteristics = {
    -1: "Puntos de ruido o anomalías",
    0: "Alto nivel de gasto y uso frecuente de la tarjeta de crédito",
    1: "Comportamientos de gasto y uso de tarjetas más moderados",
    2: "Bajo nivel de gasto y uso limitado de la tarjeta de crédito"
}

# Imprime el conjunto de datos agrupado con características específicas
for cluster, features in characteristics.items():
    print(f"Cluster {cluster}: {features}")
    print(grouped_data.loc[cluster])
    print()
# Crear un DataFrame para almacenar los resultados
results_df = pd.DataFrame(columns=['Cluster', 'Features', 'Cluster_Data'])

# Guardar los resultados de cada cluster en el DataFrame
for cluster, features in characteristics.items():
    cluster_data = grouped_data.loc[cluster].to_string()
    results_df = results_df.append({'Cluster': cluster, 'Features': features, 'Cluster_Data': cluster_data}, ignore_index=True)

# Guardar el DataFrame en un archivo CSV
results_df.to_csv('cluster_results.csv', index=False)
# Guardar el DataFrame en un archivo de Excel
results_df.to_excel('cluster_results.xlsx', index=False)
#Graficos 
# Scatter plot de los puntos de datos agrupados por DBSCAN
plt.figure(figsize=(10, 6))
sns.scatterplot(x=data_scaled[:, 0], y=data_scaled[:, 1], hue=dbscan.labels_, palette='viridis')
plt.title('Clustering Results based on Spending and Credit Card Usage Behavior')
plt.xlabel('Spending Behavior')
plt.ylabel('Credit Card Usage')
plt.show()

# Histograma de los clusters asignados por DBSCAN
plt.figure(figsize=(8, 5))
sns.histplot(dbscan.labels_, bins=len(set(dbscan.labels_)), kde=False, color='skyblue')
plt.title('Cluster Distribution based on Spending and Credit Card Usage Behavior')
plt.xlabel('Cluster Label')
plt.ylabel('Count')
plt.show()

# Imprimir el conjunto de datos agrupado con características específicas
for cluster, features in characteristics.items():
    print(f"Cluster {cluster}: {features}")
    print(grouped_data.loc[cluster])
    print()